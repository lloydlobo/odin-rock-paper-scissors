{"version":3,"sources":["app.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_s","_e","_arr","_n","_d","next","done","push","value","err","isArray","userChoice","userChoiceValue","userChoiceResults","keydownPossibleChoicesKey","userChoiceDisplay","document","getElementById","computerChoiceDisplay","resultDisplay","roundsSelections","dataScoreSpanUser","querySelector","dataScoreSpanComputer","btnPossibleChoices","querySelectorAll","roundResultInsert","createElement","delayResetGameTimeoutDuration","Number","tieAllImage","winUserImage","winComputerImage","winAll","concat","winUser","winComputer","choices","gameType","image","index","key","type","scoreToWin","computerChoice","randomChoiceNumber","Math","random","floor","userChoiceFilterChoices","choice","userChoiceIndex","fetchUserChoice","forEach","keydownController","AbortController","keydownAbortDisableBtn","textContent","classList","add","keydownAbort","abort","fetchKeydownPossibleChoicesKey","addScoreUpdate","dataScoreSpan","parseInt","roundResult","computerChoiceIndex","roundResultTextAppendWinner","event","appendChild","choiceIndexComputerWins","createChoiceParas","userChoicePara","computerChoicePara","createChoiceParasTextContent","createChoiceComputer","getComputerResultFromChoices","computerChoices","computerChoiceResults","displayChoicesContentInDOM","insertBefore","firstChild","playRound","_createChoiceParas","_getComputerResultFro","btnDisableBtnPossibleChoices","btnPossibleChoice","disabled","btnEnableBtnPossibleChoices","countdownTimer","countdownTimerStartGame","setTimeout","resetGame","_ref2","_ref3","delayResetGameTimeOut","addEventListener","e","target","roundResultInsertWinGamer","winner","resetGameDisableBtnAndKeydown","gameRoundResultInsertWinner","declareGameWinner","scoreFinalUser","innerText","winGameComputer","playGame","window","toLowerCase","AbortSignal"],"mappings":"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","file":"app.js","sourcesContent":["// console.log('Gloria In Excelsis Deo!');\n// ESLint run command /* $ `./node_modules/.bin/eslint --fix src/js/app.js` */\n\n/* declare and initialize const variables => always const before let */\n// get DOM elements by id\nconst userChoiceDisplay = document.getElementById('userChoiceDisplay');\nconst computerChoiceDisplay = document.getElementById('computerChoiceDisplay');\nconst resultDisplay = document.getElementById('resultDisplay');\nconst roundsSelections = document.getElementById('roundsSelections');\nconst dataScoreSpanUser = document.querySelector('[data-user-score]');\nconst dataScoreSpanComputer = document.querySelector('[data-computer-score]');\n// select all buttons with class of .buttonChoice\nconst btnPossibleChoices = document.querySelectorAll('.buttonChoice');\n\n// adds new paragraph choice emoji to DOM\nconst roundResultInsert = document.createElement('p');\nconst delayResetGameTimeoutDuration = Number(3000); /* 3 seconds */\n\n// set result statement\nconst tieAllImage = '🤝'; /* https://emojipedia.org/heart-hands/ */\nconst winUserImage = '✨';\nconst winComputerImage = '🔥';\nconst winAll = `${tieAllImage} It's a Tie!`;\nconst winUser = `${winUserImage} You Won!`;\nconst winComputer = `${winComputerImage} Bot Won!`;\n\n// * Array to store all possible choices\nconst choices = [\n  {\n    name: 'rock',\n    gameType: ['twoPlayer'],\n    image: '✊',\n    index: 0,\n    key: 'a',\n    type: 'traditional',\n    value: 'rock',\n  },\n  {\n    name: 'paper',\n    gameType: ['twoPlayer'],\n    image: '✋',\n    index: 1,\n    key: 's',\n    type: 'traditional',\n    value: 'paper',\n  },\n  {\n    name: 'scissors',\n    gameType: ['twoPlayer'],\n    image: '✌️',\n    index: 2,\n    key: 'd',\n    type: 'traditional',\n    value: 'scissors',\n  },\n];\n\n// declare `let` variables\nlet userChoice; /* \"temporal dead zone\" (TDZ) */\nlet userChoiceValue;\nlet userChoiceResults;\nlet keydownPossibleChoicesKey; // 'a' = rock, 's' = paper, 'd' = scissors\nlet scoreToWin = Number(roundsSelections.value);\n// -----------------------------------------------------------------------------\n\n/* 3 buttons, Math.floor() returns Math.random() to the nearest +ve integer */\n// * Function to generate computer's random integer => 0<= i <=2\nconst computerChoice = () => {\n  const randomNumber = Math.random();\n  const numberOfButtons = btnPossibleChoices.length;\n  const randomChoiceNumber = randomNumber * numberOfButtons;\n  const randomChoice = Math.floor(randomChoiceNumber);\n\n  return randomChoice;\n};\n\n// Assigns user choice an image and returns userChoiceResults\nfunction userChoiceFilterChoices(choice) {\n  userChoice = choice.image;\n  const userChoiceIndex = choice.index;\n  userChoiceResults = [userChoice, userChoiceIndex];\n}\n\n// * Function to Filter choices array by user's choice\nfunction fetchUserChoice() {\n  choices.forEach((choice) => {\n    if (userChoiceValue === (choice.name)) {\n      userChoiceFilterChoices(choice);\n\n      return userChoiceResults;\n    }\n\n    return userChoiceResults;\n  });\n}\n\n// Pass this function when the user clicks a button\nconst keydownController = new AbortController();\nconst keydownAbortDisableBtn = document.createElement('button');\nkeydownAbortDisableBtn.textContent = 'Disable Keyboard Shortcuts';\nkeydownAbortDisableBtn.classList.add('keydownAbortDisableBtn');\n\n// OR disable keydown inputs after score is reached\nconst keydownAbort = () => {\n  keydownController.abort();\n};\n\n// function to filter choices array with window.addeventlistener keydown\nfunction fetchKeydownPossibleChoicesKey() {\n  choices.forEach((choice) => {\n    if (keydownPossibleChoicesKey === (choice.key)) {\n      userChoiceFilterChoices(choice);\n\n      return userChoiceResults;\n    } if (keydownPossibleChoicesKey !== (choice.key)) {\n      // stop the function from running event listener keydown\n      keydownAbort(); // ! /* bug */\n    }\n\n    return userChoiceResults;\n  });\n}\n\n// * Updates score with each win\nconst addScoreUpdate = (dataScoreSpan) => {\n  const addScoreUpdateProperty = dataScoreSpan;\n  addScoreUpdateProperty.textContent = parseInt(\n    dataScoreSpan.textContent,\n    10,\n  ) + 1;\n};\n\n// * Declare result of a single round\nconst roundResult = (userChoiceIndex, computerChoiceIndex) => {\n  // Function to insert under the round result in the DOM\n  const roundResultTextAppendWinner = (event) => {\n    roundResultInsert.textContent = event;\n    resultDisplay.appendChild(roundResultInsert);\n  };\n\n  const choicesArrayLength = choices.length;\n  const choiceIndexUserModulo = (userChoiceIndex + 1) % choicesArrayLength;\n  const choiceIndexComputerWins = choiceIndexUserModulo === computerChoiceIndex;\n  const choiceIndexIsSame = userChoiceIndex === computerChoiceIndex;\n\n  if (choiceIndexIsSame) {\n    roundResultTextAppendWinner(winAll);\n    return 'tie';\n  }\n  if (choiceIndexComputerWins) {\n    roundResultTextAppendWinner(winComputer);\n    addScoreUpdate(dataScoreSpanComputer);\n    return 'computer';\n  }\n  if (!choiceIndexComputerWins) {\n    roundResultTextAppendWinner(winUser);\n    addScoreUpdate(dataScoreSpanUser);\n    return 'user';\n  }\n  return 'error';\n};\n\n// Function to insert user and computer choices into DOM\nfunction createChoiceParas() {\n  const userChoicePara = document.createElement('p');\n  const computerChoicePara = document.createElement('p');\n  return { userChoicePara, computerChoicePara };\n}\n\n// Function to create text content for choiceParas\nfunction createChoiceParasTextContent(userChoicePara, computerChoicePara, computerChoiceIndex) {\n  const [\n    createChoiceUser,\n    createChoiceComputer,\n  ] = [userChoicePara, computerChoicePara];\n\n  createChoiceUser.textContent = userChoice;\n  createChoiceComputer.textContent = choices[computerChoiceIndex].image;\n\n  userChoicePara.classList.add('card__choice-result__choice');\n  createChoiceComputer.classList.add('card__choice-result__choice');\n}\n// * Function to get computer's choice\nfunction getComputerResultFromChoices() {\n  // Run the random computer choice generator ONLY ONCE HERE\n  const computerChoices = choices[computerChoice()];\n  // Retrieve results & map to computer's random number with choices[] array\n  const computerChoiceResults = [computerChoices.image, computerChoices.index];\n  // Define the computer results image and index with choices[] array\n  const computerChoiceIndex = computerChoiceResults[1];\n  return { computerChoiceIndex, computerChoiceResults };\n}\n\n// * Function to display results\nfunction displayChoicesContentInDOM(userChoicePara, computerChoicePara, computerChoiceResults) {\n  // Insert DOM result elements content <p> before the last <p>\n  userChoiceDisplay.insertBefore(\n    userChoicePara,\n    userChoiceDisplay.firstChild,\n  );\n  computerChoiceDisplay.insertBefore(\n    computerChoicePara,\n    computerChoiceDisplay.firstChild,\n  );\n  resultDisplay.textContent = `\n    ${userChoiceResults[0]} vs ${computerChoiceResults[0]}\n  `;\n\n  return roundResult(userChoiceResults[1], computerChoiceResults[1]);\n}\n\n// * Function => Adds a new round result to the DOM\nconst playRound = () => {\n  const { userChoicePara, computerChoicePara } = createChoiceParas();\n  const { computerChoiceIndex, computerChoiceResults } = getComputerResultFromChoices();\n\n  createChoiceParasTextContent(userChoicePara, computerChoicePara, computerChoiceIndex);\n\n  return displayChoicesContentInDOM(userChoicePara, computerChoicePara, computerChoiceResults);\n};\n\n// Disable buttons when game is over to avoid multiple clicks\nfunction btnDisableBtnPossibleChoices() {\n  btnPossibleChoices.forEach((btnPossibleChoice) => {\n    const btnToDisable = btnPossibleChoice;\n    btnToDisable.disabled = true;\n  });\n}\n\n// Enable buttons after game is reset to allow user to play again\nfunction btnEnableBtnPossibleChoices() {\n  btnPossibleChoices.forEach((btnPossibleChoice) => {\n    const btnToEnable = btnPossibleChoice;\n    btnToEnable.disabled = false;\n  });\n}\n\n// Function displays the user when the next game will begin\n// It enables the disabled button choices again (avoids spamming)\nconst countdownTimer = () => {\n  const countdownTimerStartGame = document.createElement('p');\n  countdownTimerStartGame.textContent = '3';\n  countdownTimerStartGame.classList.add('countdownTimerStartGame');\n  resultDisplay.appendChild(countdownTimerStartGame);\n  setTimeout(() => {\n    countdownTimerStartGame.textContent = '2';\n  }, 1000);\n  setTimeout(() => {\n    countdownTimerStartGame.textContent = '1';\n  }, 2000);\n  setTimeout(() => {\n    countdownTimerStartGame.textContent = 'GO!';\n  }, 3000);\n  setTimeout(() => {\n    countdownTimerStartGame.textContent = '';\n  }, 4000);\n  // Enable the disabled button choices again\n  setTimeout(() => {\n    btnEnableBtnPossibleChoices();\n  }, 5000);\n};\n\n// * reset the game when <select> element roundSelections is changed\nconst resetGame = () => {\n  [\n    userChoiceDisplay.textContent,\n    computerChoiceDisplay.textContent,\n    resultDisplay.textContent,\n    roundResultInsert.textContent,\n  ] = '';\n  [\n    dataScoreSpanUser.textContent,\n    dataScoreSpanComputer.textContent,\n  ] = ['0', '0'];\n  // Count as the Game restarts again\n  countdownTimer();\n};\n\n// get rounds value set by the user (default is 5)\nroundsSelections.addEventListener('change', (e) => {\n  scoreToWin = Number(e.target.value);\n  resetGame();\n\n  return scoreToWin;\n});\n\n// Function to set timeout to resetGame()\nfunction delayResetGameTimeOut() {\n  setTimeout(() => {\n    resetGame();\n  }, delayResetGameTimeoutDuration);\n}\n\n// ? This remains a mystery to me\n// ? gameRoundResultInsertWinner() doesn't need this function\n// ? but only the method\n// Function to insert result when either user or computer wins\nconst roundResultInsertWinGamer = (winner) => {\n  roundResultInsertWinGamer.textContent = winner;\n};\n\n// ****\n// **** GUI FUNCTIONS\n// ****\n\n// function to disable buttons and keydown inputs and resetGame()\nfunction resetGameDisableBtnAndKeydown() {\n  btnDisableBtnPossibleChoices();\n  keydownAbort();\n  delayResetGameTimeOut();\n}\n\n// function to display & insert result when either winner wins\nfunction gameRoundResultInsertWinner(winner) {\n  //  roundResultInsertWinGamer.textContent = winner;\n  roundResultInsertWinGamer(winner);\n  resultDisplay.textContent = winner;\n}\n\n// * Function declare the winner of the game\nfunction declareGameWinner() {\n  const scoreFinalUser = Number(dataScoreSpanUser.innerText);\n  const scoreFinalComputer = Number(dataScoreSpanComputer.innerText);\n  // if conditions are met, then the game is over\n  const winGameUser = scoreFinalUser === scoreToWin;\n  const winGameComputer = scoreFinalComputer === scoreToWin;\n  if (winGameUser) {\n    gameRoundResultInsertWinner(winUser);\n    resetGameDisableBtnAndKeydown();\n  } else if (winGameComputer) {\n    gameRoundResultInsertWinner(winComputer);\n    resetGameDisableBtnAndKeydown();\n  }\n}\n\n// ****\n// **** FUNCTION RUNNER\n// ****\n\n// * Plays the game as user clicks a button or presses a key\n/**\n * @param  {} fetchUserChoice()\n * @param  {} fetchKeydownPossibleChoicesKey()\n * @param  {} playRound()\n * @param  {} declareGameWinner()\n */\nfunction playGame() {\n  // filters the userChoice to match the choices array\n  fetchUserChoice();\n  fetchKeydownPossibleChoicesKey();\n\n  // Adds a new round result to the DOM\n  playRound();\n  declareGameWinner();\n}\n\n// ****\n// **** EVENT LISTENERS\n// ****\n\n// * Listens to keydown or keyboard key presses\nwindow.addEventListener('keydown', (event) => {\n  keydownPossibleChoicesKey = event.key;\n  keydownPossibleChoicesKey = keydownPossibleChoicesKey.toLowerCase();\n\n  playGame();\n}, AbortSignal);\n\n// * Grab the buttons & for each choice & Listen to click event\nbtnPossibleChoices.forEach((btnPossibleChoice) => btnPossibleChoice.addEventListener('click', (e) => {\n  userChoiceValue = e.target.value;\n\n  playGame();\n}));\n\n// ---------------------------------FIN-----------------------------------------\n"]}